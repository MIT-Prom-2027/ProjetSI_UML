#!/usr/bin/env python3
"""
Script de d√©marrage pour l'application d'inscription universitaire
"""

import os
import sys
from app import create_app

def setup_environment():
    """Configure l'environnement de d√©veloppement"""
    # Cr√©er le fichier .env s'il n'existe pas
    print(os.environ.get('DATABASE_URL'))
    if not os.path.exists('.env'):
        print("üìù Cr√©ation du fichier .env...")
        with open('.env', 'w') as f:
            f.write("""# Configuration de d√©veloppement
SECRET_KEY=dev-secret-key-change-in-production
DATABASE_URL=sqlite:///inscription.db

# Configuration email (optionnel pour le d√©veloppement)
MAIL_SERVER=smtp.gmail.com
MAIL_PORT=587
MAIL_USE_TLS=true
MAIL_USERNAME=
MAIL_PASSWORD=

# Configuration universit√©
UNIVERSITY_NAME=Universit√© de Madagascar
UNIVERSITY_DESCRIPTION=Une universit√© d'excellence formant les leaders de demain
""")
    else:
        print("‚úÖ Fichier .env cr√©√©")
    
    # Cr√©er les dossiers n√©cessaires
    folders = ['uploads', 'static/badges', 'static/qr_codes', 'static/templates']
    for folder in folders:
        os.makedirs(folder, exist_ok=True)
    
    print("‚úÖ Dossiers cr√©√©s")

def check_dependencies():
    """V√©rifie que toutes les d√©pendances sont install√©es"""
    try:
        import flask
        import flask_sqlalchemy
        import flask_cors
        import PIL
        import qrcode
        print("‚úÖ Toutes les d√©pendances sont install√©es")
        return True
    except ImportError as e:
        print(f"‚ùå D√©pendance manquante: {e}")
        print("Installez les d√©pendances avec: pip install -r requirements.txt")
        return False

def main():
    """Fonction principale"""
    print("üöÄ D√©marrage de l'application d'inscription universitaire")
    print("=" * 60)
    
    # V√©rifier les d√©pendances
    if not check_dependencies():
        sys.exit(1)
    
    # Configurer l'environnement
    setup_environment()
    
    # Cr√©er et d√©marrer l'application
    print("\nüåü Cr√©ation de l'application Flask...")
    app = create_app()
    
    print("\nüìä Configuration:")
    print(f"   - Base de donn√©es: {app.config.get('SQLALCHEMY_DATABASE_URI')}")
    print(f"   - Universit√©: {app.config.get('UNIVERSITY_NAME')}")
    print(f"   - Dossier uploads: {app.config.get('UPLOAD_FOLDER')}")
    
    print("\nüåê Endpoints disponibles:")
    print("   - API √âtudiants: http://localhost:5000/api/etudiant")
    print("   - API Admin: http://localhost:5000/api/admin")
    print("   - Documentation: http://localhost:5000/")
    
    print("\nüß™ Pour tester l'API:")
    print("   python test_api.py")
    
    print("\n" + "=" * 60)
    print("üéØ Application pr√™te ! D√©marrage du serveur...")
    print("   Appuyez sur Ctrl+C pour arr√™ter")
    print("=" * 60)
    
    # D√©marrer l'application
    app.run(debug=True, host='0.0.0.0', port=5000)

if __name__ == "__main__":
    main()

